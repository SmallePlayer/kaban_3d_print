from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder, KeyboardButton
from aiogram import F
from aiogram.utils.formatting import (Bold, as_list, as_marked_section)
import time
import cv2
from config import BOT_TOKEN, admin_pes, admin_eg
from capture import Capture
from mqtt_publisher import pub
import sqlite3
import json


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

conn = sqlite3.connect('mydatabase.db')
cursor = conn.cursor()

state_first = True
state_second = False

def get_id_cam():
    try:
        # –ß–∏—Ç–∞–µ–º JSON-—Ñ–∞–π–ª
        with open("cam.json", "r", encoding="utf-8") as file:
            data = json.load(file)
            
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä
        print("üì∑ –°–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä –∏–∑ JSON:")
        for camera in data["cameras"]:
            print(f"ID: {camera['id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {camera['name']}")

    except FileNotFoundError:
        print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª cameras.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON!")
    except KeyError:
        print("‚ùå –û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –∫–ª—é—á–∞ 'cameras'!")

def create_photo(photo, id):
    cam = Capture(id_camera=id)
    time.sleep(0.2)
    frame = cam.get_frame()
    if frame is None:
            return

    cv2.imwrite(photo, frame)

@dp.message(Command("start", "=", prefix="</"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º 5 –∫–Ω–æ–ø–æ–∫ "–ü—Ä–∏–Ω—Ç–µ—Ä 1", "–ü—Ä–∏–Ω—Ç–µ—Ä 2", ..., "–ü—Ä–∏–Ω—Ç–µ—Ä 5" –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    # for i in range(0, 7):
    #     builder.add(KeyboardButton(text=f"–ü—Ä–∏–Ω—Ç–µ—Ä {i}"))
    builder.add(KeyboardButton(text=f"–ü—Ä–∏–Ω—Ç–µ—Ä {0}"))
    builder.add(KeyboardButton(text=f"–ü—Ä–∏–Ω—Ç–µ—Ä {4}"))
    builder.add(KeyboardButton(text=f"–ü—Ä–∏–Ω—Ç–µ—Ä {6}"))

    builder.adjust(3, 3, 3)
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–ª–µ–¥—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    builder.row(KeyboardButton(text="–°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤"))

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )

@dp.message(F.text.startswith("–ü—Ä–∏–Ω—Ç–µ—Ä"))
async def status_printr_1(message: types.Message):
    printer_number = message.text.split()[1]

    photo = "printer.jpg"
    create_photo(photo, int(printer_number))

    frame_send = FSInputFile(photo)

    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="<="),
        types.KeyboardButton(text=f"–í–∫–ª/–í—ã–∫–ª {printer_number}")
    )
    builder.row(
        types.KeyboardButton(text=f"–ü—Ä–∏–Ω—Ç–µ—Ä {printer_number}"))

    await message.answer_photo(frame_send)
    await message.answer(f"–í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä {printer_number}", reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message(F.text.startswith("–í–∫–ª/–í—ã–∫–ª"))
async def status_printr_change_1(message: types.Message):
    printer_number = message.text.split()[1]
    global state_first
    state_first = not state_first
    pub(state_first)

    await bot.send_message(admin_eg, f"–°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ {printer_number}: {state_first}")
    await bot.send_message(admin_pes, f"–°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ {printer_number}: {state_first}")
    #await message.answer(f"–°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ {printer_number}: {state_first}")


@dp.message(F.text == "–°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤")
async def status_printr_3(message: types.Message):
    content = as_list(
        as_marked_section(
            Bold("–°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤:"),
            f"–ü—Ä–∏–Ω—Ç–µ—Ä Ender 3: {state_first}",
            f"–ü—Ä–∏–Ω—Ç–µ—Ä Neptune 4: {state_second}",
        )
    )
    await message.answer(**content.as_kwargs())

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –°–ø—Ä–∞–≤–∫–∞")

@dp.message(Command("hello"))
async def cmd_hello(message: Message):
    chat_id = message.chat.id
    name = message.from_user.full_name
    print(f"{name} = {chat_id}")
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {name}"
    )


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
